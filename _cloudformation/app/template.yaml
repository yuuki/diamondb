AWSTemplateFormatVersion: 2010-09-09
Description: DiamonDB app stack
Parameters:
  RedisClusterAddress:
    Type: String
    Default: "diamondb-dummy.cache.amazonaws.com"
  RedisClusterPort:
    Type: String
    Default: "6379"
Resources:
  ALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/ecs-refarch-cloudformation/infrastructure/load-balancers.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !ImportValue diamondb-infrastructure-VPCID
        Subnets: !ImportValue diamondb-infrastructure-PublicSubnets
        SecurityGroup: !ImportValue diamondb-infrastructure-LoadBalancerSecurityGroup
  ECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/ecs-refarch-cloudformation/infrastructure/ecs-cluster.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        InstanceType: t2.micro
        ClusterSize: 2
        VPC: !ImportValue diamondb-infrastructure-VPCID
        SecurityGroup: !ImportValue diamondb-infrastructure-ECSHostSecurityGroup
        Subnets: !ImportValue diamondb-infrastructure-PrivateSubnets
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 30
  Service:
    Type: AWS::ECS::Service
    DependsOn: ECSListenerRule
    Properties:
      Cluster: !GetAtt ECS.Outputs.Cluster
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: diamondb-app
        ContainerPort: 8000
        TargetGroupArn: !Ref 'ECSTargetGroup'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'TaskDefinition'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -app]]
      ContainerDefinitions:
      - Name: diamondb-app
        Cpu: '2'
        Essential: 'true'
        Image: yuuk1/diamondb:latest
        Memory: '300'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudWatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: diamondb-app
        PortMappings:
          - ContainerPort: 8000
        Environment:
          - Name: DIAMONDB_REDIS_ADDRS
            Value: !Sub
              - ${Address}:${Port}
              - { Address: !Ref RedisClusterAddress, Port: !Ref RedisClusterPort }
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue diamondb-infrastructure-VPCID
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /ping
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
  ECSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !GetAtt ALB.Outputs.Listener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref ECSTargetGroup
          Type: forward
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "ecs.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "ec2:AuthorizeSecurityGroupIngress",
                  "ec2:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "elasticloadbalancing:DeregisterTargets",
                  "elasticloadbalancing:DescribeTargetGroups",
                  "elasticloadbalancing:DescribeTargetHealth",
                  "elasticloadbalancing:RegisterTargets"
                ],
                "Resource": "*"
              }]
            }
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-app-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      Policies:
        - PolicyName: !Sub ecs-app-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "dynamodb:BatchGetItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:CreateTable",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:UpdateItem",
                  "dynamodb:UpdateTimeToLive",
                  "dynamodb:DescribeLimits",
                  "s3:GetObject",
                  "s3:ListBucket",
                  "s3:PutObject"
                ],
                "Resource": "*"
              }]
            }
